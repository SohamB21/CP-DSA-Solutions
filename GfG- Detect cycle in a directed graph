// T.C. = O(V + E)    S.C. = O(V)

class Solution {
    // Function to detect cycle in a directed graph using dfs.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        
        //to store visited or unvisited status of each node
        HashMap<Integer, Boolean> visitedMap = new HashMap<Integer, Boolean>();
        //to store dfs status of each node
        HashMap<Integer, Boolean> dfsVisited = new HashMap<Integer, Boolean>();
        // initializing all vertices as not visited
        for (int i = 0; i < V; i++){
            visitedMap.put(i, false);
            dfsVisited.put(i, false);
        }
        
        //to handle disconnected graphs as well
        for(int i=0; i<V; i++){
            if(visitedMap.get(i) == false){
                boolean ans = checkCycleDFS(i, visitedMap, dfsVisited, adj);
                if(ans == true)
                    return ans;
            }
        }
        return false;
    }
    
    public boolean checkCycleDFS(int i, HashMap<Integer, Boolean> visitedMap, HashMap<Integer, Boolean> dfsVisited, ArrayList<ArrayList<Integer>> adj){
        visitedMap.put(i, true);
        dfsVisited.put(i, true);
        
        for(int neighbour : adj.get(i)){
            if(visitedMap.get(neighbour) == false){
                boolean ans = checkCycleDFS(neighbour, visitedMap, dfsVisited, adj);
                
                if(ans == true)
                    return ans;
            }
            else{ //visitedMap is true for that node
            //if dfsVisited is also true then cycle is present
                if(dfsVisited.get(neighbour) == true)
                    return true;
            }
        }
        //when node's dfs call is over without any cycle
        //or when it returns to its parent or has no child in adj
        //then dfsVisited must be false to avoid wrong cycle detection
        dfsVisited.put(i, false);
        return false;
    }
}
