// T.C. = O(log n)      S.C. = O(1)
class Solution {
    int findKRotation(int arr[], int n) {
        int left = 0, right = n-1, mid = -1;
        int index = -1, ans = Integer.MAX_VALUE;
        
        //finding minimum element and returning its index
        while(left <= right){
            mid = left + (right - left)/2;
            
            //if array is already sorted
            if (arr[left] <= arr[right]){
                if(arr[left] < ans){
                    ans = arr[left];
                    index = left;
                }
                break;
            }
            
            //if left half is sorted
            if(arr[left] <= arr[mid]){
                if(arr[left] < ans){
                    ans = arr[left];
                    index = left;
                }
                left = mid + 1;
            }
            //if right part is sorted
            else{
                if(arr[mid] < ans){
                    ans = arr[mid];
                    index = mid;
                }  
                right = mid - 1;
            }
        }
        
        return index;
    }
}
