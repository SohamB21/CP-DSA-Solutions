// T.C. = O(n)      S.C. = O(n)  
import java.util.Map;
import java.util.HashMap;

class Solution {
    public int subarraySum(int[] nums, int k) {
        int i, n = nums.length, preSum = 0, difference, freq, count = 0;
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        map.put(0, 1);
        
        for(i=0; i<n; i++){
            //calculating preSum by adding every element
            preSum += nums[i];
            
            //calculating difference
            difference = preSum - k;
            
            //calculating frequency of desired subarrays
            freq = map.getOrDefault(difference, 0);
            
            //updating count
            count += freq;
            
            //updating count of preSum in map
            map.put(preSum, map.getOrDefault(preSum, 0) + 1); 
        }
        
        return count;
    }
}

// T.C. = O(n)      S.C. = O(1)     BruteForce approach
class Solution {
    public int subarraySum(int[] nums, int k) {
        int i, j, n = nums.length, sum = 0, count = 0;
        
        for(i=0; i<n; i++){
            sum = 0;
            for(j=i; j<n; j++){
                sum += nums[j];
                count = (sum == k) ? count+1 : count;
            }
        }
        
        return count;
    }
}
