// T.C. = O(V + E)    S.C. = O(V)

class Solution {
    // Function to return a list containing the DFS traversal of the graph.
    HashMap<Integer, Boolean> visitedMap = new HashMap<Integer, Boolean>();

    public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        ArrayList<Integer> ans = new ArrayList<Integer>();
        
        // initializing all vertices as not visited
        for (int i = 0; i < V; i++) 
            visitedMap.put(i, false);
            
        for (int i = 0; i < V; i++){
            if(visitedMap.get(i) == false)
                createDFS(adj, ans, i);
        }
        return ans;
    }
    void createDFS(ArrayList<ArrayList<Integer>> adj, ArrayList<Integer> ans, int node){
        ans.add(node);
        visitedMap.put(node, true);
        
        for(int neighbour: adj.get(node)){
            if(visitedMap.get(neighbour) == false)
                createDFS(adj, ans, neighbour);
        }
    }
}
