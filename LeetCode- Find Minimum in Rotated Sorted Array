// T.C. = O(log n)      S.C. = O(1)
class Solution {
    public int findMin(int nums[]) {
        int left = 0, right = nums.length - 1, mid, ans = Integer.MAX_VALUE;
        
        while(left <= right){
            mid = left + (right-left) /2;
            
            //array is already sorted
            if(nums[left] <= nums[right]){
                ans = Math.min(ans, nums[left]);
                break;
            }
            //if left part is sorted, take the minimum/leftmost number
            else if(nums[left] <= nums[mid]){
                ans = Math.min(ans, nums[left]);
                left = mid + 1;
            }
            //if right part is sorted, take the minimum/leftmost number
            else if(nums[mid] <= nums[right]){
                ans = Math.min(ans, nums[mid]);
                right = mid - 1;
            }
        }
        
        return ans;
    }
}
