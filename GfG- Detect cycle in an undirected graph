// Using BFS and DFS  T.C. = O(V + E)    S.C. = O(V)

class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        
        //to store visited or unvisited status of each node
        HashMap<Integer, Boolean> visitedMap = new HashMap<Integer, Boolean>();
        // initializing all vertices as not visited
        for (int i = 0; i < V; i++) 
            visitedMap.put(i, false);
        
        //to handle the disconnected graphs as well
        for(int i=0; i<V; i++){
            if(visitedMap.get(i) == false){
                //boolean ans = isCyclicBFS(i, visitedMap, adj);
                boolean ans = isCyclicDFS(i, -1, visitedMap, adj);
                if(ans == true)
                    return ans;
            }
        }
        //means no cycle is present
        return false;
    }
    
    boolean isCyclicDFS(int node, int parent, HashMap<Integer, Boolean> visitedMap, ArrayList<ArrayList<Integer>> adj){
        visitedMap.put(node, true);
        for(int neighbour : adj.get(node)){
            if(visitedMap.get(neighbour) == false){
                boolean ans = isCyclicDFS(neighbour, node, visitedMap, adj);
                if(ans == true)
                    return ans;
            }
            else if(neighbour != parent){
                //cycle present
                return true;
            }
        }
        return false;
    }
    
    boolean isCyclicBFS(int node, HashMap<Integer, Boolean> visitedMap, ArrayList<ArrayList<Integer>> adj){
        //to store parents of each node
        HashMap<Integer, Integer> parentMap = new HashMap<Integer, Integer>();
        parentMap.put(node, -1);
        visitedMap.put(node, true);

        Queue<Integer> q = new LinkedList<>();
        q.add(node);
        
        while(!q.isEmpty()){
            int front = q.peek();
            q.remove();
            
            for(int neighbour : adj.get(front)){
                //if neighbour is already visited and
                //if neighbour is not parent of front
                if(visitedMap.get(neighbour) == true && neighbour != parentMap.get(front))
                    return true;
                else if(visitedMap.get(neighbour) == false){
                    q.add(neighbour);
                    visitedMap.put(neighbour, true);
                    parentMap.put(neighbour, front);
                }
            }
        }
        return false;
    }
}
