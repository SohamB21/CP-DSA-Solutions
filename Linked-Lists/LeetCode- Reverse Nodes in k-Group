// T.C. = O(n)      S.C. = O(n)
class Solution {
    public ListNode reverseKGroup(ListNode head, int k){
        //base case
        if(head == null)
            return null;
        
        //if there are less than k nodes left, no need to reverse
        ListNode ptr = head;
        int count = 0;
        while(ptr!=null && count<k){
            ptr = ptr.next;
            count++;
        }
        if(count < k)
            return head;
        
        //reverse first k nodes
        ListNode prev = null, curr = head, next = null;
        count = 0;
        while(curr!=null && count<k){
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
            ++count;
        }       
        
        //join rest of the reversed list with prev
        if(next != null)
            head.next = reverseKGroup(next, k);
        
        //return new reversed head
        return prev;
    }
}
